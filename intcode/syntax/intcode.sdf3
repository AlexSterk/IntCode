module intcode

lexical syntax

  ID             = [a-zA-Z] [a-zA-Z0-9]* 
  INT            = "-"? [0-9]+ 
  BackSlashChar  = "\\" 
  LAYOUT         = [\ \t\n\r] 
  CommentChar    = [\*] 
  LAYOUT         = "/*" InsideComment* "*/" 
  InsideComment  = ~[\*] 
  InsideComment  = CommentChar 
  LAYOUT         = "//" ~[\n\r]* NewLineEOF 
  NewLineEOF     = [\n\r] 
  NewLineEOF     = EOF 
  EOF            =  
  
  ID = "print" {reject}

lexical restrictions

  // Ensure greedy matching for lexicals
  
  CommentChar   -/- [\/]
  INT           -/- [0-9]
  ID            -/- [a-zA-Z0-9\_]
  
  // EOF may not be followed by any char
  
  EOF           -/- ~[]
  
  // Backslash chars in strings may not be followed by " 
  
  BackSlashChar -/- [\"]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
context-free start-symbols
  
  Start

context-free syntax
  
  Start.Program = <<{Statement "\n"}*>> 
  Statement.Print = <print <Exp>;>
  Statement.Assign = <<Var> = <Exp>;>
  Statement.If = <
  	if <Exp> <Statement> 
  	else <Statement>
  >
  Statement.Block = <{
  	<{Statement "\n"}*>
  }>
  Var.Var = <<ID>>
  Exp.Int = INT
  Exp.In = <@>
  Exp.VarRef = <<ID>>
  Exp.Add = <<Exp> + <Exp>> {left}
  Exp.Mul = <<Exp> * <Exp>> {left}
  Exp = "(" Exp ")" {bracket}
  
 context-free priorities
 	Exp.Mul > Exp.Add
